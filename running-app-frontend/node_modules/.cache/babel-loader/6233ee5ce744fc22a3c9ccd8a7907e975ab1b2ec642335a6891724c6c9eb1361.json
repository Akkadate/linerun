{"ast":null,"code":"var _s = $RefreshSig$();\n// src/services/liff.js\nimport { useState, useEffect } from 'react';\nimport liff from '@line/liff';\nimport config from '../config';\nexport const useLiff = () => {\n  _s();\n  const [liffObject, setLiffObject] = useState(null);\n  const [liffError, setLiffError] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Initialize LIFF\n  useEffect(() => {\n    const initializeLiff = async () => {\n      try {\n        await liff.init({\n          liffId: config.liffId\n        });\n        setLiffObject(liff);\n\n        // Check if user is logged in\n        if (liff.isLoggedIn()) {\n          setIsLoggedIn(true);\n          const userProfile = await liff.getProfile();\n          setProfile(userProfile);\n        }\n      } catch (error) {\n        console.error('LIFF initialization failed', error);\n        setLiffError(error);\n      }\n    };\n    initializeLiff();\n  }, []);\n\n  // Login function\n  const login = () => {\n    if (!liffObject) return;\n    liffObject.login();\n  };\n\n  // Logout function\n  const logout = () => {\n    if (!liffObject) return;\n    liffObject.logout();\n    setIsLoggedIn(false);\n    setProfile(null);\n  };\n\n  // Get ID Token for API authentication\n  const getIdToken = () => {\n    if (!liffObject || !isLoggedIn) return null;\n    return liffObject.getIDToken();\n  };\n\n  // Get user profile\n  const getProfile = async () => {\n    if (!liffObject || !isLoggedIn) return null;\n    try {\n      const userProfile = await liffObject.getProfile();\n      setProfile(userProfile);\n      return userProfile;\n    } catch (error) {\n      console.error('Failed to get user profile', error);\n      return null;\n    }\n  };\n\n  // Share message to LINE\n  const shareMessage = async text => {\n    if (!liffObject || !liffObject.isApiAvailable('shareTargetPicker')) {\n      console.error('ShareTargetPicker is not available');\n      return false;\n    }\n    try {\n      const result = await liffObject.shareTargetPicker([{\n        type: 'text',\n        text: text\n      }]);\n      return result;\n    } catch (error) {\n      console.error('Failed to share message', error);\n      return false;\n    }\n  };\n  return {\n    liffObject,\n    liffError,\n    isLoggedIn,\n    profile,\n    login,\n    logout,\n    getIdToken,\n    getProfile,\n    shareMessage\n  };\n};\n_s(useLiff, \"wgp7WYL08CeMwLKa4emWmHAtrdI=\");","map":{"version":3,"names":["useState","useEffect","liff","config","useLiff","_s","liffObject","setLiffObject","liffError","setLiffError","profile","setProfile","isLoggedIn","setIsLoggedIn","initializeLiff","init","liffId","userProfile","getProfile","error","console","login","logout","getIdToken","getIDToken","shareMessage","text","isApiAvailable","result","shareTargetPicker","type"],"sources":["/var/www/running-app/running-app-frontend2/src/services/liff.js"],"sourcesContent":["// src/services/liff.js\nimport { useState, useEffect } from 'react';\nimport liff from '@line/liff';\nimport config from '../config';\n\nexport const useLiff = () => {\n  const [liffObject, setLiffObject] = useState(null);\n  const [liffError, setLiffError] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Initialize LIFF\n  useEffect(() => {\n    const initializeLiff = async () => {\n      try {\n        await liff.init({ liffId: config.liffId });\n        setLiffObject(liff);\n        \n        // Check if user is logged in\n        if (liff.isLoggedIn()) {\n          setIsLoggedIn(true);\n          const userProfile = await liff.getProfile();\n          setProfile(userProfile);\n        }\n      } catch (error) {\n        console.error('LIFF initialization failed', error);\n        setLiffError(error);\n      }\n    };\n\n    initializeLiff();\n  }, []);\n\n  // Login function\n  const login = () => {\n    if (!liffObject) return;\n    liffObject.login();\n  };\n\n  // Logout function\n  const logout = () => {\n    if (!liffObject) return;\n    liffObject.logout();\n    setIsLoggedIn(false);\n    setProfile(null);\n  };\n\n  // Get ID Token for API authentication\n  const getIdToken = () => {\n    if (!liffObject || !isLoggedIn) return null;\n    return liffObject.getIDToken();\n  };\n\n  // Get user profile\n  const getProfile = async () => {\n    if (!liffObject || !isLoggedIn) return null;\n    try {\n      const userProfile = await liffObject.getProfile();\n      setProfile(userProfile);\n      return userProfile;\n    } catch (error) {\n      console.error('Failed to get user profile', error);\n      return null;\n    }\n  };\n\n  // Share message to LINE\n  const shareMessage = async (text) => {\n    if (!liffObject || !liffObject.isApiAvailable('shareTargetPicker')) {\n      console.error('ShareTargetPicker is not available');\n      return false;\n    }\n\n    try {\n      const result = await liffObject.shareTargetPicker([\n        {\n          type: 'text',\n          text: text\n        }\n      ]);\n      return result;\n    } catch (error) {\n      console.error('Failed to share message', error);\n      return false;\n    }\n  };\n\n  return {\n    liffObject,\n    liffError,\n    isLoggedIn,\n    profile,\n    login,\n    logout,\n    getIdToken,\n    getProfile,\n    shareMessage\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}